bty = "n"
))
counts <- table(df$sex.x, df$region)
barplot(counts, main="Distribution by Gender and Region",
xlab="Region", col=c("darkblue","red"),
names.arg=c("Northeast", "Midwest", "South","West"),
legend.text=TRUE,
args.legend=list(
x=ncol(y) + 3,
#y=max(colSums(y)),
bty = "n"
))
counts <- table(df$sex.x, df$region)
barplot(counts, main="Distribution by Gender and Region",
xlab="Region", col=c("darkblue","red"),
names.arg=c("Northeast", "Midwest", "South","West"),
legend.text=TRUE,
args.legend=list(
# x=ncol(y) + 3,
#y=max(colSums(y)),
bty = "n"
))
counts <- table(df$sex.x, df$region)
barplot(counts, main="Distribution by Gender and Region",
xlab="Region", col=c("darkblue","red"),
names.arg=c("Northeast", "Midwest", "South","West"),
legend.text=TRUE,
args.legend = list(x = "topright", bty = "n", inset=c(-0.15, 0)))
counts <- table(df$sex.x, df$region)
barplot(counts, main="Distribution by Gender and Region",
xlab="Region", col=c("darkblue","red"),
names.arg=c("Northeast", "Midwest", "South","West"),
legend.text=TRUE,
legend = c("Male", "Female"),
args.legend = list(x = "topright", bty = "n", inset=c(-0.15, 0)))
counts <- table(df$sex.x, df$region)
barplot(counts, main="Distribution by Gender and Region",
xlab="Region", col=c("darkblue","red"),
legend = c("Male", "Female"),
args.legend = list(x = "topright", bty = "n", inset=c(-0.5, 0)),
names.arg=c("Northeast", "Midwest", "South","West"))
counts <- table(df$sex.x, df$region)
barplot(counts, main="Distribution by Gender and Region",
xlab="Region", col=c("darkblue","red"),
legend = c("Male", "Female"),
#args.legend = list(x = "topright", bty = "n", inset=c(-0.5, 0)),
names.arg=c("Northeast", "Midwest", "South","West"))
library(dplyr)
library(ggplot2)
library(tidyr)
library(pivottabler)
library(scales)
library(gtsummary)
library(ggpubr)
library(ggfortify)
library(cluster)
library(MASS)
library(lmtest)
library(fBasics)
library(car)
#############################
#
# Preparing the data
#
###############################
# setting my working directory
setwd("School/courses/applied_stats/p1")
#read csvs
main_m <- read.csv(file = 'main_m.csv')
main_f <- read.csv(file = 'main_f.csv')
scale_m <- read.csv(file = 'scale_m.csv')
scale_f <- read.csv(file = 'scale_f.csv')
colnames(main_m)[1]<- "hhid"
colnames(main_f)[1]<- "hhid"
colnames(scale_m)[1]<- "hhid"
colnames(scale_f)[1]<- "hhid"
# join the data of the males
m_data = inner_join(main_m, scale_m, by = "hhid", copy = FALSE, suffix = c(".x", ".y"))
# join the data of the females
f_data = inner_join(main_f, scale_f, by = "hhid", copy = FALSE, suffix = c(".x", ".y"))
cat("Dimension for Male DF: ", dim(m_data))
cat("Dimension for Female DF: ", dim(f_data))
df <- rbind(m_data, f_data)
cat("Dimension for General DF: ", dim(df))
df
scale_vars <- factor(c('kq2_b','kq2_c','kq2_d','kq2_e','kq2_f','kq2_g',   'kq7','kq33_a','kq33_b','kq34','kq37','kq38','kq39','kq40','kq41','kq42'))
df[scale_vars]
df$scale_vars
scale_vars
df$kq2_b
df %>% dplyr::select(scale_vars)
sv = df %>% dplyr::select(scale_vars)
sv = df %>% dplyr::select(scale_vars)
dim(df)
for (col in scale_vars) {
index <- df$col %in%  c("9")
df = df[!index,]
}
dim(df)
#read csvs
main_m <- read.csv(file = 'main_m.csv')
main_f <- read.csv(file = 'main_f.csv')
scale_m <- read.csv(file = 'scale_m.csv')
scale_f <- read.csv(file = 'scale_f.csv')
colnames(main_m)[1]<- "hhid"
colnames(main_f)[1]<- "hhid"
colnames(scale_m)[1]<- "hhid"
colnames(scale_f)[1]<- "hhid"
# join the data of the males
m_data = inner_join(main_m, scale_m, by = "hhid", copy = FALSE, suffix = c(".x", ".y"))
# join the data of the females
f_data = inner_join(main_f, scale_f, by = "hhid", copy = FALSE, suffix = c(".x", ".y"))
cat("Dimension for Male DF: ", dim(m_data))
cat("Dimension for Female DF: ", dim(f_data))
df <- rbind(m_data, f_data)
cat("Dimension for General DF: ", dim(df))
col
df$col
df[col]
type(df[col])
factor(df[col])
as.factor(df[col])
str(df[col])
df[col] <- as.factor(df[col])
str(df[col])
index <- df[col] %in%  c("9")
index
c("9") %in%  df[col]
c("9") == df[col]
df[col] == 9
df[col] == '9'
df[col] = '9'
df[col]
#read csvs
main_m <- read.csv(file = 'main_m.csv')
main_f <- read.csv(file = 'main_f.csv')
scale_m <- read.csv(file = 'scale_m.csv')
scale_f <- read.csv(file = 'scale_f.csv')
colnames(main_m)[1]<- "hhid"
colnames(main_f)[1]<- "hhid"
colnames(scale_m)[1]<- "hhid"
colnames(scale_f)[1]<- "hhid"
# join the data of the males
m_data = inner_join(main_m, scale_m, by = "hhid", copy = FALSE, suffix = c(".x", ".y"))
# join the data of the females
f_data = inner_join(main_f, scale_f, by = "hhid", copy = FALSE, suffix = c(".x", ".y"))
cat("Dimension for Male DF: ", dim(m_data))
cat("Dimension for Female DF: ", dim(f_data))
df <- rbind(m_data, f_data)
cat("Dimension for General DF: ", dim(df))
df[col] <- as.factor(df[col]).
df[col] <- as.factor(df[col])
filter(df[col] == 9)
df %>% filter(df[col] == 9)
df[col]col
df[col]
#read csvs
main_m <- read.csv(file = 'main_m.csv')
main_f <- read.csv(file = 'main_f.csv')
scale_m <- read.csv(file = 'scale_m.csv')
scale_f <- read.csv(file = 'scale_f.csv')
colnames(main_m)[1]<- "hhid"
colnames(main_f)[1]<- "hhid"
colnames(scale_m)[1]<- "hhid"
colnames(scale_f)[1]<- "hhid"
# join the data of the males
m_data = inner_join(main_m, scale_m, by = "hhid", copy = FALSE, suffix = c(".x", ".y"))
# join the data of the females
f_data = inner_join(main_f, scale_f, by = "hhid", copy = FALSE, suffix = c(".x", ".y"))
cat("Dimension for Male DF: ", dim(m_data))
cat("Dimension for Female DF: ", dim(f_data))
df <- rbind(m_data, f_data)
cat("Dimension for General DF: ", dim(df))
df[col]
as.factor(df[col])
as.factor(as.character(df[,col]))
df[,col] <- as.factor(as.character(df[,col]))
as.factor(as.character(df[,col]))
df[col]
typeof(df[col])
str(df[col])
df[col] %in%  c("9")
c("9") %in%  df[col]
c("9")  ==  df[col]
index <- c("9") ==  df[col]
df[index,]
scale_vars
knitr::opts_chunk$set(echo = FALSE)
# import libraries
library(rmarkdown)
library(dplyr)
library(ggplot2)
library(tidyr)
library(pivottabler)
library(scales)
library(gtsummary)
library(ggpubr)
library(ggfortify)
library(cluster)
library(MASS)
library(lmtest)
library(fBasics)
library(rcompanion)
library(gridExtra)
library(cowplot)
library(kableExtra)
# setwd("School/courses/applied_stats/p1")
#read csvs
main_m <- read.csv(file = 'main_m.csv')
main_f <- read.csv(file = 'main_f.csv')
scale_m <- read.csv(file = 'scale_m.csv')
scale_f <- read.csv(file = 'scale_f.csv')
# convert column names to readable format
colnames(main_m)[1]<- "hhid"
colnames(main_f)[1]<- "hhid"
colnames(scale_m)[1]<- "hhid"
colnames(scale_f)[1]<- "hhid"
# join the data of the males
m_data = inner_join(main_m, scale_m, by = "hhid", copy = FALSE, suffix = c(".x", ".y"))
# join the data of the females
f_data = inner_join(main_f, scale_f, by = "hhid", copy = FALSE, suffix = c(".x", ".y"))
#cat("Dimension for Male DF: ", dim(m_data))
#cat("Dimension for Female DF: ", dim(f_data))
# append the male and female datasts together.
df <- rbind(m_data, f_data)
# cat("Dimension for General DF: ", dim(df))
# split all the predictors into groups , having categorical data - convert them into factors ,
# binary - into factors as well
# numeric datasets will currently stay the same
cat_data <- factor(c('region','urb','race','origin','povcat','sex.x','emp_status','salt_typ','vt_freq','health','exercise','smk_100','smk_now'))
cols = c('region','urb','race','origin','povcat','sex.x','emp_status','salt_typ','vt_freq','health','exercise','smk_100','smk_now')
df[cols] <- lapply(df[cols], factor)  ## as.factor() could also be used
bool_cat <- factor(c('plan_yn','shop_yn','wic_yn','dt01','dt02','dt03','dt06','dt07'
,'doctor1','doctor2','doctor3','doctor4','doctor5','doctor6','doctor7'))
cols = c('plan_yn','shop_yn','wic_yn','dt01','dt02','dt03','dt06','dt07'
,'doctor1','doctor2','doctor3','doctor4','doctor5','doctor6','doctor7')
df[cols] <- lapply(df[cols], factor)  ## as.factor() could also be used
numeric_cat <- factor(c('hhsize','income','pctpov','fs_rcv12','age','grade','d1_tv','bmi_sp'))
not_sure <- factor(c('salt_frq'))
scale_vars <- factor(c('kq2_b','kq2_c','kq2_d','kq2_e','kq2_f','kq2_g',   'kq7','kq33_a','kq33_b','kq34','kq37','kq38','kq39','kq40','kq41','kq42'))
#count unique values per field
df %>% summarise_all(n_distinct)
df$region = factor(df$region)
# histogram of region
p1 <- ggplot(df, aes(x=factor(region))) + stat_count(color="black", fill="lightblue", linetype="dashed")
p1 <- p1 + scale_x_discrete(labels=c("Northeast","Midwest","South","West")) +
ggtitle('Region Variable Distribution') # for the main title
df$urb = factor(df$urb)
# hsitogram of urb
p2 <- ggplot(df, aes(x=factor(urb))) + stat_count(color="black", fill="lightblue", linetype="dashed")
p2 <- p2 + scale_x_discrete(labels=c("Central","Suburban","Non Metroolitan")) +
ggtitle('Urb Variable Distribution') # for the main title
plot_grid(p1, p2)
# histogram of income, adding two lines to indicate the median and mean.
lines <- data.frame(vlines = c(median(df$income), mean(df$income)), labels = c("median", "mean"), stringsAsFactors = FALSE)
p1 <- ggplot(df, aes(x=income)) + geom_histogram(color="black", fill="lightblue", linetype="dashed")+
geom_vline(data = lines, aes(xintercept = vlines),col=c('red','green')) +
geom_text(data = lines, aes(x = vlines, y = 0, label = labels)) +
ggtitle('Income Variable Distribution') # for the main title
# histogram of age, adding two lines to indicate the median and mean.
lines <- data.frame(vlines = c(median(df$age), mean(df$age)), labels = c("median", "mean"), stringsAsFactors = FALSE)
p2 <- ggplot(df, aes(x=age)) + geom_histogram(color="black", fill="lightblue", linetype="dashed")+
geom_vline(data = lines, aes(xintercept = vlines),col=c('red','green')) +
geom_text(data = lines, aes(x = vlines, y = 0, label = labels)) +
ggtitle('Age Variable Distribution') # for the main title
plot_grid(p1, p2)
# histogram of the gender parameter
df$sex.x = factor(df$sex.x)
p1 <- ggplot(df, aes(x=factor(sex.x))) + stat_count(color="black", fill="lightblue", linetype="dashed")
p1 <- p1 + scale_x_discrete(labels=c("Male","Female")) +
ggtitle('Gender Variable Distribution') # for the main title
# histogram of the race parameter
df$race = factor(df$race)
p2 <- ggplot(df, aes(x=factor(race))) + stat_count(color="black", fill="lightblue", linetype="dashed")
p2 <- p2 + scale_x_discrete(labels=c("White","Black","Asian/Pacific","American Indian","Other")) +
ggtitle('Race Variable Distribution') # for the main title
plot_grid(p1, p2)
# histogram of the grade parameter , added two lines to indicate the mean and median
lines <- data.frame(vlines = c(median(df$grade), mean(df$grade)), labels = c("median", "mean"), stringsAsFactors = FALSE)
p1 <- ggplot(df, aes(x=grade)) + geom_histogram(color="black", fill="lightblue", linetype="dashed")+
geom_vline(data = lines, aes(xintercept = vlines),col=c('red','green')) +
geom_text(data = lines, aes(x = vlines, y = 0, label = labels)) +
ggtitle('Grade Variable Distribution') # for the main title
# histogram of the exercise parameter
df$exercise = factor(df$exercise)
p2 <- ggplot(df, aes(x=factor(exercise))) + stat_count(color="black", fill="lightblue", linetype="dashed")
p2 <- p2 + scale_x_discrete(labels=c("Daily","5-6","2-4","Once_a_week","1-3_times_a_week","Rarely/Never")) +
ggtitle('Exercise Variable Distribution') # for the main title
plot_grid(p1, p2)
# histogram of the kq7 parameter
df$kq7 = factor(df$kq7)
p <- ggplot(df, aes(x=factor(kq7))) + stat_count(color="black", fill="lightblue", linetype="dashed")
p + scale_x_discrete(labels=c("Overweight","Underweight","About Right","Dont Know","Not Ascertained")) +   ggtitle('KQ7 Variable Distribution') # for the main title
# frequency matrix - how many answered yes and no , per question.
summary(df %>% dplyr::select('dt01','dt02','dt03','dt06','dt07')) %>% kbl(caption = "Frequency Matrix - Doctor Questions") %>%
kable_classic(full_width = F, html_font = "Cambria")
# histogram of emp status
df$emp_status = factor(df$emp_status)
p <- ggplot(df, aes(x=factor(emp_status))) + stat_count(color="black", fill="lightblue", linetype="dashed")
p + scale_x_discrete(labels=c("Employed -full time","Employed - part time","Employed, not at work last week",
"employed")) +   ggtitle('Employee Status Variable Distribution') # for the main title
# selecting data split by the data type (for future convenience)
df_cat_data    <- df %>% dplyr::select(cat_data)
df_bool_cat    <- df %>% dplyr::select(bool_cat)
df_numeric_cat <- df %>% dplyr::select(numeric_cat)
df_not_sure    <- df %>% dplyr::select(not_sure)
# relationship between sex and region
counts <- table(df$sex.x, df$region)
barplot(counts, main="Distribution by Gender and Region",
xlab="Region", col=c("darkblue","red"),
legend = c("Male", "Female"),
#args.legend = list(x = "topright", bty = "n", inset=c(-0.5, 0)),
names.arg=c("Northeast", "Midwest", "South","West"))
# relationship in a histogram between gender and urb
counts <- table(df$sex.x, df$urb)
barplot(counts, main="Gender Distribution by Urb ",
xlab="Gender", col=c("darkblue","red"),
legend = c("Male", "Female"),
#args.legend = list(x = "topright", bty = "n", inset=c(-0.5, 0)),
names.arg=c("Central", "Suburban", "NonMetropolan"))
# plot_grid(p1, p2)
# bar plot of urb split by region
counts <- table(df$region, df$urb)
p1 <- barplot(counts, main="Region Distribution by Urb",
xlab="Region", col=c("darkblue","red",'green','yellow'),
legend = c("Northeast", "Midwest", "South","West"),
names.arg=c("Central", "Suburban", "NonMetropolan"))
attach(df)
p2 <- plot(age, income, main="Age ~ Income",
xlab="Age ", ylab="Income", pch=1,
col=rgb(0,100,0,50,maxColorValue=255))
p2 <- p2 +  abline(lm(income~age), col="red") # regression line (y~x)
# plot_grid(p1, p2)
# remove nans from exercise
index <- df$exercise == '9'
df = df[!index,]
# remove nans , and uninformative data from kq7
index <- df$kq7 %in%  c("4","5","8","9")
df = df[!index,]
index <- is.na(df$kq7)
df = df[!index,]
# removed obs that are over the grade 18
index <- df$grade > 18
df = df[!index,]
# remove nans from doctor questions
primes_list <- list('dt01','dt02','dt03','dt06','dt07')
for (col in primes_list) {
df[,col] <- as.factor(as.character(df[,col]))
index <- c("5") ==  df[col]
df = df[!index,]
index <- c("9") ==  df[col]
df = df[!index,]
}
# removed nans from emp status
df[,emp_status] <- as.factor(as.character(df[,emp_status]))
df[,'emp_status'] <- as.factor(as.character(df[,'emp_status']))
index <-   c("9") ==  df$emp_status
df = df[!index,]
# remove for scale vars the not ascertained observations
for (col in scale_vars) {
df[,col] <- as.factor(as.character(df[,col]))
index <- c("9") ==  df[col]
df = df[!index,]
}
# quantiles of BMI
# print(summary(df$bmi_sp))
quantile(df$bmi_sp, probs = c(0, 0.25, 0.5, 0.75, 0.9,0.98,1)) %>% kbl(caption = "Quantile Matrix - BMI results") %>%
kable_classic(full_width = F, html_font = "Cambria")
quantile(df$bmi_sp, probs = c(0, 0.25, 0.5, 0.75, 0.9,0.98,1), na.rm = TRUE) %>% kbl(caption = "Quantile Matrix - BMI results") %>%
kable_classic(full_width = F, html_font = "Cambria")
# quantiles of BMI
# print(summary(df$bmi_sp))
quantile(df$bmi_sp, probs = c(0, 0.25, 0.5, 0.75, 0.9,0.98,1), na.rm = TRUE) %>% kbl(caption = "Quantile Matrix - BMI results") %>%
kable_classic(full_width = F, html_font = "Cambria")
# distribution plot of BMI
# distribution of BMI
p1 <- ggplot(df, aes(x=factor(bmi_sp))) + stat_count(color="black", fill="lightblue", linetype="dashed")
p1<- p1+geom_density(alpha = .2, fill = "#FF6666") +   ggtitle('BMI Variable Distribution') # for the main title
# density plot
y <- df$bmi_sp
p2 <-ggdensity(y,
main = "Density : BMI",
xlab = "BMI Value")
plot_grid(p1, p2)
# QQ plot of BMI
ggplot(df, aes(sample = bmi_sp)) +
stat_qq()+   ggtitle('QQ Plot of BMI variable pre-transformation')
# filter tail and look again
# df$filtered_bmi <-  df$bmi_sp[df$bmi_sp < 70]
#summary(filtered_bmi)
#qqnorm(filtered_bmi, pch = 1, frame = FALSE, main ='QQ Plot of BMI variable prior to outlier removal')
#qqline(filtered_bmi, col = "steelblue", lwd = 2)
# filter tail
df <- df[df$bmi_sp < 70,]
## look at the box cox for the BMI ( vs the intercept)
Box <- boxcox(df$bmi_sp ~ 1)
Cox = data.frame(Box$x, Box$y)            # Create a data frame with the results
Cox2 = Cox[with(Cox, order(-Cox$Box.y)),] # Order the new data frame by decreasing y
# Cox2[1,]
lambda = Cox2[1, "Box.x"]                 # Extract that lambda
T_box = (df$bmi_sp ^ lambda - 1)/lambda   # Transform the original data
df$T_box = T_box
plotNormalHistogram(T_box,main = "Normailty Histogram - Transfored BMI Variable")
# qq plot of the transformed data
ggplot(df, aes(sample = T_box)) +
stat_qq()+   ggtitle('QQ Plot of BMI variable post-transformation')
y <- df$T_box
# boxplot per region
# deosnt seem to have any differences, ADDED: after removing outlier Y, seems like cat 2 ranges a bit more, cat 4 probably has lower variance.
p1 <- ggplot(df, aes(x=region, y=T_box)) +
geom_boxplot()+ggtitle('BP Region~BMI')
# boxplot per race
# 2 and 4 potentially have higher BMI by definition, 1 has long tail (WHITE)
p2 <- ggplot(df, aes(x=race, y=T_box)) +
geom_boxplot()+ggtitle('BP Race~BMI')
# boxplot per urb
# no change, ADDED: 1 seems a little more subtle
p3 <- ggplot(df, aes(x=urb, y=T_box)) +
geom_boxplot()+ggtitle('BP Urb~BMI')
# boxplot per sex
# larger variance with 2
p4 <- ggplot(df, aes(x=factor(sex.x), y=T_box)) +
geom_boxplot()+ggtitle('BP Gender~BMI')
plot_grid(p1,p2)
plot_grid(p3,p4)
# scatter plot vs grade
#pretty straight regression line , ADDED: declining a bit as the grade progresses and peaks around 12
p1 <- plot(df$grade,df$T_box,col=rgb(0.4,0.4,0.8,0.6),pch=16 , cex=1.3, main='Scatter plot Grade ~ BMI Transformed')
model <- lm(df$T_box ~ df$grade + I(df$grade^2) + I(df$grade^3)+ I(df$grade^4))
myPredict <- predict( model )
ix <- sort(df$grade,index.return=T)$ix
p1<- p1 + lines(df$grade[ix], myPredict[ix], col=2, lwd=2 )
# scatter plot vs age
#pretty straight regression line
# this should be similar to grade ...need to verify why not.
p2 <- plot(df$age,df$T_box,col=rgb(0.4,0.4,0.8,0.6),pch=16 , cex=1.3 , main ='Scatter Plot BMI_T ~ Age + Age^2' )
model <- lm(df$T_box ~ df$age + I(df$age^2) )
myPredict <- predict( model )
ix <- sort(df$age,index.return=T)$ix
p2<- p2 + lines(df$age[ix], myPredict[ix], col=2, lwd=2 )
# plot_grid(p1,p2)
# transform the age to sqaure it
df$age_t = df$age^2
# scatter plot vs income
#BMI with slight decreasing relationship
ggplot(df, aes(x=income, y=T_box)) +
geom_point(shape=18, color="blue") +
geom_smooth(method=lm,  linetype="dashed",
color="darkred", fill="blue")+ggtitle('Scatter Income ~ BMI Transformed')
# box plots of exercise and kq7 vs transformed bmi
p1 <- ggplot(df, aes(x=exercise, y=T_box)) +
geom_boxplot()+ggtitle('Box Plot exercise ~ BMI' )
p2 <- ggplot(df, aes(x=factor(kq7), y=T_box)) +
geom_boxplot()+ggtitle('Box Plot KQ7 ~ BMI' )
plot_grid(p1,p2)
selected_cols = c('region','urb','income','age','sex.x','race','grade','exercise','kq7','dt01',
'dt02','dt03','dt06','dt07','emp_status',
'kq2_b'  ,'kq2_c' , 'kq2_d' , 'kq2_e'  ,'kq2_f'  ,'kq2_g' ,   'kq33_a' ,
'kq33_b' ,'kq34' ,  'kq37' ,  'kq38' ,  'kq39',   'kq40'   ,'kq41' ,  'kq42')
selected_df <- df %>% dplyr::select(selected_cols)
##########################################
# Regrress Y vs each column seperately
###########################################
tbl_uv_ex1 <-
tbl_uvregression(
selected_df,
method = glm,
y = T_box,
# exponentiate = TRUE,
pvalue_fun = function(x) style_pvalue(x, digits = 2)
) %>%
add_global_p()
#tbl_uv_ex1 %>% kbl(caption = "Univariate Results TransBMI ~ X") %>%
#  kable_classic(full_width = F, html_font = "Cambria")
tbl_uv_ex1#
# Choose columns to filter after univariate runs
#columns_filtered_after_uvariate_regs = #c('region','income','age','sex.x','race','grade','exercise','dt01','dt02','dt03','dt07',
#                                         'emp_status')
columns_filtered_after_uvariate_regs =
c('region','income','age','sex.x','race','grade','exercise','kq7','dt01',
'dt02','dt03','dt07','emp_status',
'kq2_c' , 'kq2_d' , 'kq2_e'    ,'kq2_g' ,   'kq33_a' ,
'kq34' ,  'kq37' ,  'kq38'        ,  'kq42')
uvariate_filtered_df <- selected_df %>% dplyr::select(columns_filtered_after_uvariate_regs)
# without interactions
full.model <- lm(T_box ~., data = uvariate_filtered_df  )
# Stepwise regression model - both ways
step.model <- stepAIC(full.model, direction = "both",
trace = TRUE)
#library(huxtable)
#summary(step.model) %>% kbl(caption = "Step AIC Summary Results") %>%
#  kable_classic(full_width = F, html_font = "Cambria")
#huxreg(step.model)
summary(step.model)
# assign residuals and fitted points to variables
model_res = resid(step.model)
fitted <- fitted(step.model)
# summary(model_res)
#%>% kbl(caption = "Residual Summary") %>%
#  kable_classic(full_width = F, html_font = "Cambria")
# first view loks fine in terms of normality
hist(model_res, main="Histogram of Residuals",
ylab="Residuals")
# plot residuals vs fitted set
plot(fitted, model_res, ylab="Residuals", xlab="BMI Score Fitted", main="BMI Prediction (residuals)")
#Q-Q Plot of residuals
qqnorm(model_res)
qqline(model_res)
# perform dwtest
dwtest(step.model) #Test for independence of residuals
# perform cooks distance and Hat values vs studentized residuals , for influence plot.
p1 <- influencePlot(step.model, id.method="identify", main="Influence Plot", sub="Circle size is proportial to Cook's Distance" )
